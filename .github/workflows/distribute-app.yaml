name: Distribute app

on:
  pull_request:
    branches:
      - main
    types:
      - closed
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-stg.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+
  workflow_dispatch:
    inputs:
      env:
        description: "Build envirinment"
        required: true
        type: choice
        options:
          - dev
          - stg
          - prd

jobs:
  tag-env:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      env: ${{ env.BUILD_ENV }}
      version: ${{ env.BUILD_VERSION }}
    steps:
      - name: Get tag envirinment
        run: |
          # タグに含まれるのは stg か rc か何もないかだけど、stg 以外は prd として env に保存する
          echo "BUILD_ENV=${{ contains(github.ref_name, '-stg') && 'stg' || 'prd' }}" >> $GITHUB_ENV
          echo "BUILD_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

  build-env:
    if: github.event_name != 'push'
    runs-on: ubuntu-latest
    outputs:
      env: ${{ env.BUILD_ENV }}
      version: ${{ env.BUILD_VERSION }}
    steps:
      - name: Get merged envirinment
        if: github.event.pull_request.merged == true
        id: merged
        run: |
          echo "env=dev" >> $GITHUB_OUTPUT

      - name: Set environment
        run: |
          echo "BUILD_ENV=${{ steps.merged.outputs.env || inputs.env }}" >> $GITHUB_ENV

      - name: Get latest release
        id: latest-release
        uses: pozetroninc/github-action-get-latest-release@v0.7.0
        # リリースがされてないとエラーになるが続行させる
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          excludes: prerelease, draft

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add tag
        run: |
          # 受け取った引数のコミットハッシュから現在のコミットまでのコミット数を返す関数
          getCountSinceRef() {
            echo $(git rev-list --count $1..HEAD)
          }

          # prd は rc に変換し、それ以外はそのまま使う
          suffix=$(echo "${{ env.BUILD_ENV }}" | sed 's/prd/rc/')

          # リリースがされてない場合は main ブランチの最初のコミットハッシュを ref にする
          latest_ref=${{ steps.latest-release.outputs.release || '$(git rev-list --max-parents=0 HEAD)' }}
          # 最終リリースから現在のコミットまでのコミット数を取得する
          count_since_latest=$(getCountSinceRef $latest_ref)

          if [[ $(git tag -l "*-$suffix*" | grep -c ".") -ne 0 ]]; then
            # 利用したいバージョンのタグがある場合は、そのタグを ref にする
            newest_ref=$(git describe --tags --abbrev=0 --match "*-$suffix*")
            # 利用したいバージョンから現在のコミットまでのコミット数を取得する
            count_since_newest=$(getCountSinceRef $newest_ref)
          else
            # 利用したいバージョンのタグがない場合は、最新のリリースと同じ状態にする
            newest_ref=$latest_ref
            count_since_newest=$count_since_latest
          fi

          if [[ $count_since_newest < $count_since_latest ]]; then
            # 最終リリースよりも利用したいバージョンの方が新しい場合は、利用したいバージョンを env に保存する処理
            echo "BUILD_VERSION=$newest_ref" >> $GITHUB_ENV
          else
            # 最終リリースの方が新しい場合は、最終リリースのバージョンのパッチバージョンをインクリメントして env に保存する処理
            # リリースがされてない場合は v0.0.0 を初期バージョンにする
            latest_version=${{ steps.latest-release.outputs.release || 'v0.0.0' }}

            # パッチバージョンをインクリメントする
            IFS='.' read -ra version_parts <<< "${latest_version#v}"
            let "patch_version=${version_parts[2]}+1"
            latest_version="${version_parts[0]}.${version_parts[1]}.$patch_version"

            # v0.0.0-xxx.0 の形にして env に保存する
            echo "BUILD_VERSION=v$latest_version-$suffix.$count_since_latest" >> $GITHUB_ENV
          fi

  show-env:
    needs:
      - tag-env
      - build-env
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    env:
      BUILD_ENV: ${{ needs.tag-env.outputs.env || needs.build-env.outputs.env }}
      BUILD_VERSION: ${{ needs.tag-env.outputs.version || needs.build-env.outputs.version }}
    steps:
      - name: Show environment
        run: |
          echo "BUILD_ENV=${{ env.BUILD_ENV }}"
          echo "BUILD_VERSION=${{ env.BUILD_VERSION }}"
